plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.3'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'application'
}

group = 'com.Blog'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

application {
    mainClass = 'com.Blog.myBlog.MyBlogApplication'  // 실행할 메인 클래스 지정
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom "com.google.cloud:libraries-bom:26.32.0"
    }
}

dependencies {
	implementation platform("com.google.cloud:spring-cloud-gcp-dependencies:5.3.0")
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation 'com.mysql:mysql-connector-j'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6:3.1.1.RELEASE'
	implementation 'io.jsonwebtoken:jjwt-api:0.12.5'
	implementation 'io.jsonwebtoken:jjwt-gson:0.12.5'
	implementation 'io.jsonwebtoken:jjwt-impl:0.12.5'
    implementation 'com.google.cloud:spring-cloud-gcp-starter-sql-mysql'
}

tasks.named('test') {
	useJUnitPlatform()
}

allprojects {
    tasks.withType(JavaCompile).configureEach {
        options.compilerArgs << "-parameters"
    }
}

tasks.named('compileJava') {
    options.compilerArgs << "-parameters"
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-parameters"
}

jar {
    enabled = false
}

bootJar {
    archiveFileName = 'myBlog-0.0.1-SNAPSHOT.jar'
}

def frontendDir = new File(project.projectDir, 'src/main/frontend')

task installReact(type: Exec) {
    workingDir frontendDir
    commandLine 'npm', 'install'
}

task buildReact(type: Exec) {
    dependsOn installReact
    workingDir frontendDir
    commandLine 'npm', 'run', 'build'
}

// processResources.dependsOn buildReact

processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    from("src/main/frontend/build") {
        into "static"
    }
}
